secrets:
  envFile:
    file: ${AUTH_ENV}

volumes:
  user-vol:
    driver: local
    name: user-vol


services:
  user:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE:-0}
        - DNS_SERVER=8.8.8.8
    image: img_user:latest
    container_name: user
    hostname: user
    volumes:
      - user-vol:/usr/src/app
    restart: unless-stopped
    secrets:
      - envFile
    env_file:
      - ${AUTH_ENV}
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      IP: ${IP}
      ENV_FILE_PATH: /run/secrets/envFile
      DEBUG_MODE: ${DEBUG_MODE:-0}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    expose:
      - "3002"
    networks:
      backend:
        ipv4_address: 172.18.0.3
    labels:
      - "traefik.enable=true"
      # --- Public Router: Externally facing ---
      # Matches any request coming to the public domain with the /api/user prefix
      - "traefik.http.routers.api-user-public.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/user`)"
      - "traefik.http.routers.api-user-public.entrypoints=websecure"
      - "traefik.http.routers.api-user-public.tls=true"
      - "traefik.http.routers.api-user-public.priority=300"
      # Apply middlewares: one for Host rewriting, one for path rewriting, and debug middleware
      - "traefik.http.routers.api-user-public.middlewares=change-host-to-user,rewrite-user-path,user-debug"
      # Middleware: Change host header for internal routing
      - "traefik.http.middlewares.change-host-to-user.headers.customrequestheaders.Host=user"
      # Middleware: Rewrite the incoming path. Strips the /api/user prefix so that:
      #   /api/user/profile  â†’  /api/profile
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.regex=^/api/user/(.*)"
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.replacement=/api/$1"
      # Middleware: Debug headers to help with troubleshooting
      - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Original-Host={{ request.host }}"
      - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Original-Path={{ request.path }}"
      - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Original-URL={{ request.url }}"
      - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Router=user-service"
      # Service Definition: user microservice backend
      - "traefik.http.services.user-service.loadbalancer.server.port=3002"
      # # --- Router for blocked paths ---
      # - "traefik.http.routers.api-user-blocked.rule=Host(`${DOMAIN}`) && Path(`/api/user/new-user`)"
      # - "traefik.http.routers.api-user-blocked.entrypoints=websecure"
      # - "traefik.http.routers.api-user-blocked.tls=true"
      # - "traefik.http.routers.api-user-blocked.priority=300" 
      # - "traefik.http.routers.api-user-blocked.middlewares=deny-access"
      
      # # Middleware for blocking specific paths
      # - "traefik.http.middlewares.deny-access.customResponse.statusCode=403"
      # - "traefik.http.middlewares.deny-access.customResponse.contentType=text/plain"
      # - "traefik.http.middlewares.deny-access.customResponse.body=Access Denied"
      
      # # --- Router for display-name endpoint ---
      # - "traefik.http.routers.api-user-displayname.rule=Host(`${DOMAIN}`) && Path(`/api/user/display-name`)"
      # - "traefik.http.routers.api-user-displayname.entrypoints=websecure"
      # - "traefik.http.routers.api-user-displayname.tls=true"
      # - "traefik.http.routers.api-user-displayname.priority=295"
      # - "traefik.http.routers.api-user-displayname.middlewares=change-host-to-user,rewrite-user-path,user-debug"
      # - "traefik.http.routers.api-user-displayname.service=user-service@docker"
      
      # # --- Router for avatar endpoint ---
      # - "traefik.http.routers.api-user-avatar.rule=Host(`${DOMAIN}`) && Path(`/api/user/avatar`)"
      # - "traefik.http.routers.api-user-avatar.entrypoints=websecure"
      # - "traefik.http.routers.api-user-avatar.tls=true"
      # - "traefik.http.routers.api-user-avatar.priority=295"
      # - "traefik.http.routers.api-user-avatar.middlewares=change-host-to-user,rewrite-user-path,user-debug"
      # - "traefik.http.routers.api-user-avatar.service=user-service@docker"
      
      # # --- Router for profile endpoint ---
      # - "traefik.http.routers.api-user-profile.rule=Host(`${DOMAIN}`) && Path(`/api/user/profile`)"
      # - "traefik.http.routers.api-user-profile.entrypoints=websecure"
      # - "traefik.http.routers.api-user-profile.tls=true"
      # - "traefik.http.routers.api-user-profile.priority=295"
      # - "traefik.http.routers.api-user-profile.middlewares=change-host-to-user,rewrite-user-path,user-debug"
      # - "traefik.http.routers.api-user-profile.service=user-service@docker"
      
      # # --- Public Router: All other user API paths ---
      # - "traefik.http.routers.api-user-public.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/user`) && !Path(`/api/user/new-user`,`/api/user/avatar`,`/api/user/display-name`,`/api/user/profile`)"
      # - "traefik.http.routers.api-user-public.entrypoints=websecure"
      # - "traefik.http.routers.api-user-public.tls=true"
      # - "traefik.http.routers.api-user-public.priority=290"
      # - "traefik.http.routers.api-user-public.middlewares=change-host-to-user,rewrite-user-path,user-debug"
      # - "traefik.http.routers.api-user-public.service=user-service@docker"
      
      # # Middleware: Debug headers
      # - "traefik.http.middlewares.user-debug.headers.customrequestheaders.X-Debug-Router=api-user-router"
      # - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Original-Path=${URL}"
      # - "traefik.http.middlewares.user-debug.headers.customresponseheaders.X-Transformed-Path=${PATH}"
      
      # # Middleware: Change the Host header to the internal hostname
      # - "traefik.http.middlewares.change-host-to-user.headers.customrequestheaders.Host=user"
      
      # # Middleware: General path rewrite (one middleware for all paths)
      # - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.regex=^/api/user/(.*)"
      # - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.replacement=/api/$1"
      
      # # Service Definition: user microservice backend
      # - "traefik.http.services.user-service.loadbalancer.server.port=3002"
