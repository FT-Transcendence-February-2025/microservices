  entryPoints:
  web:
    address: ":80"
    # allowACMEByPass: true
    # http:
    #   redirections:
    #     entryPoint:
    #       to: websecure
    #       scheme: https
    forwardedHeaders:
      trustedIPs:
        - "0.0.0.0/0"
  websecure:
    address: ":443"
    # allowACMEByPass: true
    http2:
      maxConcurrentStreams: 250
    http:
      tls:
        # certResolver: myresolver
        domains:
          - main: "{{ env \"DOMAIN\" }}"
            sans:
              - "{{ env \"IP\" }}"
              - "localhost"
              - "127.0.0.1"
              - "*.{{ env \"DOMAIN\" }}"
            #   - "*.{{ env `DNS_SERVER` }}"
    forwardedHeaders:
      trustedIPs:
        - "0.0.0.0/0"

providers:
  docker:
    exposedByDefault: false
    endpoint: "unix:///var/run/docker.sock"

# self certificates
tls:
  certificates:
    - certFile: "/run/secrets/ssl_crt.crt"
      keyFile: "/run/secrets/ssl_key.key"
      stores:
        - default
  stores:
    default:
      defaultCertificate:
        certFile: "/run/secrets/ssl_crt.crt"
        keyFile: "/run/secrets/ssl_key.key"
  options:
    default:
      minVersion: VersionTLS13
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_256_GCM_SHA384

tcpServersTransport:
  tls:
    rootCAs:
      - "/run/secrets/ssl_pem.pem"
log:
  level: DEBUG
accessLog: {}
global:
  checkNewVersion: false
  sendAnonymousUsage: false
api:
  dashboard: true
  insecure: true

secrets:
  ssl_key.key:
    file: ${SSL_KEY}
  ssl_crt.crt:
    file: ${SSL_CRT}
  ssl_pem.pem:
    file: ${SSL_PEM}
  ssl_email:
    file: ${SSL_EMAIL}

volumes:
  traefik-logs:
    driver: local
    name: traefik-vol

services:
  traefik:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        DOMAIN: ${DOMAIN}
        IP: ${IP}
        DOMAIN_TEST: ${DOMAIN_TEST}
      secrets:
      - ssl_key.key
      - ssl_crt.crt
      - ssl_pem.pem
      - ssl_email
    image: img_traefik:latest
    container_name: traefik
    hostname: traefik
    environment:
      DOMAIN: ${DOMAIN}
      DOMAIN_TEST: ${DOMAIN_TEST}
      HOST_USER: ${HOST_USER}
      SSL_PORT: ${SSL_PORT}
      IP: ${IP}
      TZ: Europe/Berlin
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    extra_hosts:
      - "${DOMAIN}:127.0.0.1"
      - "${DOMAIN}:${IP}"
    secrets:
      - ssl_key.key
      - ssl_crt.crt
      - ssl_pem.pem
      - ssl_email
    volumes:
      - "${XDG_RUNTIME_DIR}/docker.sock:/var/run/docker.sock:ro"
      - "traefik-logs:/etc/traefik/"
    networks:
      - frontend
      - backend
      # - game # will handle wss?
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Redirect HTTP to HTTPS
      - "traefik.http.routers.http-catchall.rule=Host(`${DOMAIN}`) || Host(`${IP}`) || Host(`127.0.0.1`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # Middleware to redirect to HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # Redirect HTTPS to canonical domain
      - "traefik.http.routers.https-catchall.rule=Host(`${IP}`) || Host(`127.0.0.1`)"
      - "traefik.http.routers.https-catchall.entrypoints=websecure"
      - "traefik.http.routers.https-catchall.middlewares=redirect-to-canonical"
      # Middleware to redirect to canonical domain
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.regex=^https?://(?:${IP}|127\\.0\\.0\\.1)(.*)"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.replacement=https://${DOMAIN}$$1"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.permanent=true"

volumes:
  front-end-vol:
    driver: local
    name: front-end-vol


  front-end:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE}
        - DNS_SERVER=8.8.8.8
        - VITE_HOST=${DOMAIN}
        - VITE_PORT=3000
    image: img_front-end:latest
    container_name: front-end
    hostname: front-end
    volumes:
      - front-end-vol:/app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      VITE_HOST: ${DOMAIN}
      IP: ${IP}
      DOMAIN_TEST: ${DOMAIN_TEST}
      VITE_PORT: "3000"
      DEBUG_MODE: ${DEBUG_MODE}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    ports:
      - "3030:3000"
    extra_hosts:
      - "${DOMAIN}:127.0.0.1"
      - "${DOMAIN}:${IP}"
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-router.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend-router.entrypoints=websecure"
      - "traefik.http.routers.frontend-router.tls=true"
      - "traefik.http.routers.frontend.priority=40"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=3000"
secrets:
  envFile:
    file: ${AUTH_ENV}

volumes:
  authentication-vol:
    driver: local
    name: authentication-vol

services:
  auth:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE}
        - DNS_SERVER=8.8.8.8
    image: img_authentication:latest
    container_name: auth
    hostname: auth
    command: sh -c 'echo "$(hostname -i) auth.$DOMAIN" >> /etc/hosts && exec npm run dev'
    volumes:
      - authentication-vol:/usr/src/app
    # working_dir: /usr/src/app
    restart: unless-stopped
    secrets:
      - envFile
    env_file:
      - ${AUTH_ENV}
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      IP: ${IP}
      DOMAIN_TEST: ${DOMAIN_TEST}
      ENV_FILE_PATH: /run/secrets/envFile
      DEBUG_MODE: ${DEBUG_MODE}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - backend
    labels:
    - "traefik.enable=true"

    # --- Public Router: Externally facing ---
    # Matches any request coming to the public domain with the /api/auth prefix
    - "traefik.http.routers.api-auth-public.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/auth`)"
    - "traefik.http.routers.api-auth-public.entrypoints=websecure"
    - "traefik.http.routers.api-auth-public.tls=true"
    - "traefik.http.routers.api-auth-public.priority=90"
    # Apply middlewares: one for Host rewriting and one for path rewriting
    - "traefik.http.routers.api-auth-public.middlewares=change-host-to-auth,rewrite-auth-path"

    # --- Internal Router: Dynamic Wildcard Matching for Subdomains ---
    # Matches any request coming from wildcard subdomains with /api/auth prefix
    - "traefik.http.routers.api-auth-internal.rule=HostRegexp(`{subdomain:[a-z]+}.domain`) && PathPrefix(`/api/auth`)"
    - "traefik.http.routers.api-auth-internal.entrypoints=websecure"
    - "traefik.http.routers.api-auth-internal.tls=true"
    # Use the same middlewares to rewrite Host and Path
    - "traefik.http.routers.api-auth-internal.middlewares=change-host-to-auth,rewrite-auth-path"
    # Middleware: Change the Host header to the internal hostname (auth.domain)
    - "traefik.http.middlewares.change-host-to-auth.headers.customrequestheaders.Host=auth.${DOMAIN}"
    # Middleware: Rewrite the incoming path. Strips the /api/auth prefix so that:
    #   /api/auth/login  →  /api/login
    - "traefik.http.middlewares.rewrite-auth-path.replacePathRegex.regex=^/api/auth(.*)"
    - "traefik.http.middlewares.rewrite-auth-path.replacePathRegex.replacement=/api$1"

    # Service Definition: Authentication microservice backend
    - "traefik.http.services.authentication-service.loadbalancer.server.port=3001"

secrets:
  envFile:
    file: ${AUTH_ENV}

volumes:
  user-vol:
    driver: local
    name: user-vol

services:
  user:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE}
        - DNS_SERVER=8.8.8.8
    image: img_user:latest
    container_name: user
    hostname: user
    volumes:
      - user-vol:/usr/src/app
    restart: unless-stopped
    secrets:
      - envFile
    env_file:
      - ${AUTH_ENV}
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      IP: ${IP}
      DOMAIN_TEST: ${DOMAIN_TEST}
      ENV_FILE_PATH: /run/secrets/envFile
      DEBUG_MODE: ${DEBUG_MODE}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      # --- Public Router: Externally facing ---
      # Matches any request coming to the public domain with the /api/user prefix
      - "traefik.http.routers.api-user-public.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/user`)"
      - "traefik.http.routers.api-user-public.entrypoints=websecure"
      - "traefik.http.routers.api-user-public.tls=true"
      - "traefik.http.routers.api-user-public.priority=90"
      # Apply middlewares: one for Host rewriting and one for path rewriting
      - "traefik.http.routers.api-user-public.middlewares=change-host-to-user,rewrite-user-path"

      # --- Internal Router: Dynamic Wildcard Matching for Subdomains ---
      # Matches any request coming from wildcard subdomains with /api/user prefix
      - "traefik.http.routers.api-user-internal.rule=HostRegexp(`{subdomain:[a-z]+}.domain`) && PathPrefix(`/api/user`)"
      - "traefik.http.routers.api-user-internal.entrypoints=websecure"
      - "traefik.http.routers.api-user-internal.tls=true"
      # Use the same middlewares to rewrite Host and Path
      - "traefik.http.routers.api-user-internal.middlewares=change-host-to-user,rewrite-user-path"
      # Middleware: Change the Host header to the internal hostname (user.domain)
      - "traefik.http.middlewares.change-host-to-user.headers.customrequestheaders.Host=user.${DOMAIN}"
      # Middleware: Rewrite the incoming path. Strips the /api/user prefix so that:
      #   /api/user/task  →  /api/task
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.regex=^/api/user(.*)"
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.replacement=/api$1"

      # Service Definition: user microservice backend
      - "traefik.http.services.user-service.loadbalancer.server.port=3002"
