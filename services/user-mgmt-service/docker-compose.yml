secrets:
  envFile:
    file: ${AUTH_ENV}

volumes:
  user-vol:
    driver: local
    name: user-vol
    driver_opts:
      o: bind
      type: none
      device: ${DATA}/user

services:
  user:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE:-0}
        - DNS_SERVER=8.8.8.8
    image: img_user:latest
    container_name: user
    hostname: user
    volumes:
      - user-vol:/usr/src/app
    restart: unless-stopped
    secrets:
      - envFile
    env_file:
      - ${AUTH_ENV}
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      IP: ${IP}
      ENV_FILE_PATH: /run/secrets/envFile
      DEBUG_MODE: ${DEBUG_MODE:-0}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    expose:
      - "3002"
    networks:
      backend:
        ipv4_address: 172.18.0.3
    labels:
      - "traefik.enable=true"
      # --- Public Router: Externally facing ---
      # Matches any request coming to the public domain with the /api/user prefix
      - "traefik.http.routers.api-user-public.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/user`)"
      - "traefik.http.routers.api-user-public.entrypoints=websecure"
      - "traefik.http.routers.api-user-public.tls=true"
      - "traefik.http.routers.api-user-public.priority=90"
        # Apply middlewares: one for blocking and others for Host and Path rewriting
      - "traefik.http.routers.api-user-public.middlewares=block-new-user,change-host-to-user,rewrite-user-path"

      # Middleware: Block requests to /api/user/new-user
      - "traefik.http.middlewares.block-new-user.rule=Path(`/api/user/new-user`)"
      - "traefik.http.middlewares.block-new-user.customResponse.statusCode=403"
      - "traefik.http.middlewares.block-new-user.customResponse.contentType=text/plain"
      - "traefik.http.middlewares.block-new-user.customResponse.body=Access Denied"

      # # Middleware: Change the Host header to the internal hostname (user.domain)
      - "traefik.http.middlewares.change-host-to-user.headers.customrequestheaders.Host=user.${DOMAIN}"
      # Middleware: Rewrite the incoming path. Strips the /api/user prefix so that:
      #   /api/user/task  â†’  /api/task
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.regex=^/api/user(.*)"
      - "traefik.http.middlewares.rewrite-user-path.replacePathRegex.replacement=/api$1"

      # Service Definition: user microservice backend
      - "traefik.http.services.user-service.loadbalancer.server.port=3002"
