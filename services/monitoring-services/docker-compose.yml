secrets:
  ssl_key.key:
    file: ${SSL_KEY}
  ssl_crt.crt:
    file: ${SSL_CRT}
  ssl_pem.pem:
    file: ${SSL_PEM}
  ssl_email:
    file: ${SSL_EMAIL}

volumes:
  traefik-logs:
    driver: local
    name: traefik-vol

services:
  traefik:
    build:
      context: ./traefik/
      dockerfile: Dockerfile
      args:
        DOMAIN: ${DOMAIN}
        IP: ${IP}
        DOMAIN_TEST: ${DOMAIN_TEST}
      secrets:
        - ssl_key.key
        - ssl_crt.crt
        - ssl_pem.pem
        - ssl_email
    image: img_traefik:latest
    container_name: traefik
    hostname: traefik
    environment:
      DOMAIN: ${DOMAIN}
      AUTH_DASHBOARD: ${AUTH_DASHBOARD}
      IP: ${IP}
      TZ: Europe/Berlin
    ports:
      - "80:80"
      - "443:443"
      # - "8080:8080"
    extra_hosts:
      - "${DOMAIN}:127.0.0.1"
      - "${DOMAIN}:${IP}"
    secrets:
      - ssl_key.key
      - ssl_crt.crt
      - ssl_pem.pem
      - ssl_email
    volumes:
      - "${XDG_RUNTIME_DIR}/docker.sock:/var/run/docker.sock:ro"
      - "traefik-logs:/etc/traefik/"
      # (Static configuration file is assumed to be mounted inside Traefik if needed)
    networks:
      frontend:
      backend:
        ipv4_address: 172.18.0.22
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ######################################################
      # (Metrics configuration is still active – notice no dedicated port)
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"

      ######################################################
      # GLOBAL REDIRECTION (HTTP → HTTPS, Canonical)
      ######################################################
      - "traefik.http.routers.http-catchall.rule=Host(`${DOMAIN}`) || Host(`${IP}`) || Host(`127.0.0.1`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      - "traefik.http.routers.https-catchall.rule=Host(`${IP}`) || Host(`127.0.0.1`)"
      - "traefik.http.routers.https-catchall.entrypoints=websecure"
      - "traefik.http.routers.https-catchall.middlewares=redirect-to-canonical"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.regex=^https?://(?:${IP}|127\\.0\\.0\\.1)(.*)"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.replacement=https://${DOMAIN}$$1"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.permanent=true"

      # ----------------------------------------------------------------
      # (1) Redirect Router for /traefik:
      # ----------------------------------------------------------------
      - "traefik.http.routers.dash-redirect.rule=Host(`${DOMAIN}`) && (Path(`/traefik`) || Path(`/traefik/`))"
      - "traefik.http.routers.dash-redirect.entrypoints=websecure"
      - "traefik.http.routers.dash-redirect.middlewares=dashboard-auth,redirect-to-dashboard"
      - "traefik.http.middlewares.redirect-to-dashboard.redirectregex.regex=^https?://(.*)/traefik/?$"
      - "traefik.http.middlewares.redirect-to-dashboard.redirectregex.replacement=https://$1/dashboard/#"
      - "traefik.http.middlewares.redirect-to-dashboard.redirectregex.permanent=true"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${AUTH_DASHBOARD}"

      # ----------------------------------------------------------------
      # (2) Dashboard Router for /dashboard:
      # ----------------------------------------------------------------
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${DOMAIN}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.priority=100"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"

      # ----------------------------------------------------------------
      # (3) API Router for /api:
      # ----------------------------------------------------------------
      - "traefik.http.routers.traefik-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.traefik-api.entrypoints=websecure"
      - "traefik.http.routers.traefik-api.priority=150"
      - "traefik.http.routers.traefik-api.service=api@internal"
      - "traefik.http.routers.traefik-api.middlewares=dashboard-auth"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - "./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    networks:
      frontend:
        ipv4_address: 172.19.0.21
      backend:
        ipv4_address: 172.18.0.21
    restart: unless-stopped
    labels:
      #####################################################
      # ROUTER & MIDDLEWARE
      #####################################################
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${DOMAIN}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.middlewares=auth-prometheus"
      - "traefik.http.middlewares.auth-prometheus.basicauth.users=${AUTH_DASHBOARD}"
      #####################################################
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      frontend:
        ipv4_address: 172.19.0.20
      backend:
        ipv4_address: 172.18.0.20
    restart: unless-stopped
    labels:
      #####################################################
      #ROUTER & MIDDLEWARE (secured with basic auth)
      #####################################################
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.middlewares=auth-grafana"
      - "traefik.http.middlewares.auth-grafana.basicauth.users=${AUTH_DASHBOARD}"
      #####################################################
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # pebble:
  #   image: letsencrypt/pebble
  #   container_name: pebble
  #   hostname: pebble
  #   environment:
  #     - PEBBLE_VA_NOSLEEP=1
  #   ports:
  #     - "14000:14000" # Pebble ACME server
  #     - "15000:15000" # Pebble challenge server
  #   networks:
  #     - backend
  #   labels:
  #     - "traefik.enable=true"