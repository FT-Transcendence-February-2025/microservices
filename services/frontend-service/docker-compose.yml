
services:
  front:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DEBUG_MODE=${DEBUG_MODE:-0}
        - DNS_SERVER=8.8.8.8
        - VITE_HOST=${DOMAIN}
        - VITE_PORT=3000
    image: img_front:latest
    container_name: front
    hostname: front
    volumes:
      - front-vol:/app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      VITE_HOST: ${DOMAIN}
      IP: ${IP}
      VITE_PORT: "3000"
      DEBUG_MODE: ${DEBUG_MODE:-0}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    expose:
      - "3000"
    extra_hosts:
      - "${DOMAIN}:127.0.0.1"
      - "${DOMAIN}:${IP}"
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-router.rule=Host(`${DOMAIN}`) && !PathPrefix(`/api/`)"
      - "traefik.http.routers.frontend-router.entrypoints=websecure"
      - "traefik.http.routers.frontend-router.tls=true"
      - "traefik.http.routers.frontend.priority=40"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=3000"
      # # Add a circuit breaker to avoid overwhelming the frontend if it becomes unstable.
      # - "traefik.http.services.frontend.loadbalancer.circuitbreaker.expression=NetworkErrorRatio() > 0.5"
      # # Configure rate limiting middleware: average of 100 req/s with a burst of 50.
      # - "traefik.http.middlewares.frontend-ratelimit.ratelimit.average=100"
      # - "traefik.http.middlewares.frontend-ratelimit.ratelimit.burst=50"
      # # Bind the rate limiting middleware to the router.
      # - "traefik.http.routers.frontend.middlewares=frontend-ratelimit"
