volumes:
  fastify-vol:
    driver: local
    name: fastify-vol
    # driver_opts:
    #   type: bind
    #   o: bind
    #   device: ./

# networks:
#   backend:
#     external: true

services:
  fastify:
    build:
      context: ./fastify-nodejs
      dockerfile: Dockerfile
      args:
        - DNS_SERVER=8.8.8.8
    container_name: fastify
    hostname: fastify
    volumes:
      - fastify-vol:/usr/src/app
    # working_dir: /usr/src/app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DOMAIN: ${DOMAIN}
      IP: ${IP}
    #   DNS_SERVER: ${DNS_SERVER}
    #   DNS_SEARCH: ${DNS_SEARCH}
      DOMAIN_TEST: ${DOMAIN_TEST}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    #   - ${DNS_SERVER}
    # dns_search:
    #   - ${DNS_SEARCH}
    networks:
    #   - internal
      - backend
    labels:
      - "traefik.enable=true"
      #
      # Router for canonical domain requests (highest priority)
      - "traefik.http.routers.fastify-canonical.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.fastify-canonical.entrypoints=websecure"
      - "traefik.http.routers.fastify-canonical.priority=30"
    #   - "traefik.http.routers.fastify-canonical.middlewares=disable-hsts"
      #
      # Define a middleware to disable HSTS
    #   - "traefik.http.middlewares.disable-hsts.headers.stsSeconds=0"

      # Router that catches other requests (IP or non‚Äêcanonical domain) and redirects them
      - "traefik.http.routers.fastify-redirect.rule=Host(`${DOMAIN}`) || Host(`${IP}`) || Host(`127.0.0.1`)"
      - "traefik.http.routers.fastify-redirect.entrypoints=web,websecure"
      - "traefik.http.routers.fastify-redirect.priority=20"
      - "traefik.http.routers.fastify-redirect.middlewares=redirect-to-canonical"
      #
      # Middleware: Redirect requests from non-canonical hosts to the canonical domain.
      # Note: In the regex, dots are escaped (\\.) and use $$ to inject a literal $ in the replacement.
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.regex=^https?://(?:${IP}|127\\.0\\.0\\.1)(.*)"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.replacement=https://${DOMAIN}$$1"
      - "traefik.http.middlewares.redirect-to-canonical.redirectregex.permanent=true"
      #
      # Define the service to which both routers send traffic.
      - "traefik.http.services.fastify-service.loadbalancer.server.port=3000"

  # frontend:
  #   image: your-web-server-image
  #   labels:
  #     - "traefik.http.services.web-service.loadbalancer.server.port=80"